impute<-BartMI("Users/as82986/",xx=xx,yy=yy,datatype=datatype,
type=type,numskip=199,burn=1000)
View(BartMI)
View(BartMI)
View(serBart)
getwd()
impute<-BartMI("/Users/as82986/",xx=xx,yy=yy,datatype=datatype,
type=type,numskip=199,burn=1000)
impute<-BartMI("/Users/as82986/BART",xx=xx,yy=yy,datatype=datatype,
type=type,numskip=199,burn=1000)
impute<-BartMI("/Users/as82986/BART/",xx=xx,yy=yy,datatype=datatype,
type=type,numskip=199,burn=1000)
impute<-BartMI("/Users/as82986/BART/",xx=xx,yy=yy,datatype=datatype,
type=type,numskip=199,burn=1000)
impute<-BartMI("/Users/as82986/BART",xx=xx,yy=yy,datatype=datatype,
type=type,numskip=199,burn=1000)
impute<-BartMI("Users/as82986/BART/sequential_bart/",xx=xx,yy=yy,datatype=datatype,
type=type,numskip=199,burn=1000)
impute<-BartMI("/Users/as82986/BART/sequential_bart/",xx=xx,yy=yy,datatype=datatype,
type=type,numskip=199,burn=1000)
getwd()
impute<-BartMI("/Users/as82986/BART/sequential_bart/",xx=xx,yy=yy,datatype=datatype,
type=type,numskip=199,burn=1000)
/Users/as82986/BART/sequential_bart/
"/Users/as82986/BART/sequential_bart/"
paste("/Users/as82986/BART/sequential_bart/","","mif.txt",sep="")
mif = scan(paste("/Users/as82986/BART/sequential_bart/","","mif.txt",sep=""))
test <- "abc$def`gh`i\\j"
cat(shQuote(test), "\n")
cat(shQuote(test))
library("PatternMixtureModel", lib.loc="~/Library/R/3.3/library")
wed_n=150
wed_pp=4
wed_xx<-matrix(NA,wed_n,wed_pp)
wed_varm1<-matrix(0.8,wed_pp,wed_pp)
diag(wed_varm1)<-1
wed_xx<-mvrnorm(wed_n,rep(0,wed_pp),wed_varm1)
wed_xx[wed_xx[,3]>0,3]<-1
wed_xx[wed_xx[,3]<=0,3]<-0
wed_yy<-rowMeans(wed_xx)+rnorm(wed_n)
for(i in 2:4){
wed_ran<-runif(wed_n)
wed_xx[ran<0.1,i]=NA
}
# run the sequential bart program
wed_datatype=c(0,0,1,0)
wed_type=1
#--------------------------------------------------
serBart=function(cstem,
x,y,
nd=1000,burn=500,
m=200,
sigest=NA, sigdf=3, sigquant=.90,
kfac=2.0,
fname="",nmissing=0,xmiss=NULL,vartype,z,bistart,binum,type=0,beta=NULL,V=NULL)
{
cat("***** iiiRunning serBart\n\n")
#   my=mean(y)
#   y=y-my
#--------------------------------------------------
#write files
xroot=paste(cstem,fname,"x.txt",sep="")
yroot=paste(cstem,fname,"y.txt",sep="")
xmissroot=paste(cstem,fname,"xmiss.txt",sep="")
vartyperoot=paste(cstem,fname,"vartype.txt",sep="")
zroot=paste(cstem,fname,"z.txt",sep="")
ffname=paste(cstem,fname,"mif.txt",sep="")
p=ncol(x)
write(t(x),file=xroot,ncol=p)
write(y,file=yroot,ncol=1)
write(t(xmiss),file=xmissroot,ncol=nmissing+1)
write(t(vartype),file=vartyperoot,ncol=p+1)
if(binum==0){write(t(z),file=zroot,ncol=1)
}else{ write(t(z),file=zroot,ncol=binum)}
#--------------------------------------------------
nu=sigdf
sigq=qchisq(1.0-sigquant,nu)
lambda = (sigest*sigest*sigq)/nu #lambda parameter for sigma prior
#--------------------------------------------------
#run bart
if (type==0) {
cmd = paste(cstem,'mi_bart',sep='')
cmd = paste(cmd,xroot,yroot,"0",nd,"0.0",burn,m,nu,kfac,nmissing,xmissroot,bistart,vartyperoot,zroot,ffname)
} else if (type==1) {
cmd = paste(cstem,'mi_bart_y',sep='')
cmd = paste(cmd, xroot,yroot,"0",nd,"0.0",burn,m,nu,kfac,nmissing,xmissroot,bistart,vartyperoot,zroot,ffname)
} else if (type==2) {
betaroot=paste(cstem,fname,"beta.txt",sep="")
vroot=paste(cstem,fname,"z.txt",sep="")
write(t(V),file=vroot,ncol=p+1)
write(beta,file=betaroot,ncol=1)
cmd = paste(cstem,'mi_bart_y1',sep='')
cmd = paste(cmd,xroot,yroot,"0",nd,"0.0",burn,m,nu,kfac,nmissing,xmissroot,bistart,vartyperoot,zroot,betaroot,vroot,ffname)
}
for (i in 1:(nmissing+1)){
cmd<-paste(cmd,lambda[i])
}
cat(cmd,'\n')
print("here")
### THE most important command...
system(cmd) ## gonna create the excutable files from cpp that will eventually create mif.txt
#--------------------------------------------------
#read in results
mif =scan(paste(cstem,fname,"mif.txt",sep=""))
retlist<<-list(mif=mif)
return(retlist)
}
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
####################   RUN BARTMI HERE   ############################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
BartMI=function(cstem,xx,yy,datatype,type,
numskip=199,burn=1000,
m=200,sigdf=3, sigquant=.90,
kfac=2.0)
{
pp<-ncol(xx)
n<-nrow(xx)
summis<-rep(NA,pp)
for(i in 1:pp){summis[i]<-sum(is.na(xx[,i]))}
summis1<-summis
summis1[datatype==1]<-summis[datatype==1]+n
summis1[datatype==0]<-summis[datatype==0]+2*n
summis1[summis==0]<-0
nvar<-pp-length(summis[summis==0])
xx_reorder<-xx[,order(summis1)]
vartype<-datatype[order(summis1)]
if (type==1|type==2) {
xx_reorder<-cbind(xx_reorder,yy)
vartype<-c(vartype,0)
nvar<-nvar+1
pp<-pp+1}
## missing data indicator
xmiss=matrix(rep(0,(nvar)*n),ncol=(nvar))
for (j in 1:(nvar)){
xmiss[is.na(xx_reorder[,pp+1-j]),j]=1
}
sighat<-rep(NA,nvar)
for(j in (pp):(pp-nvar+1)){
data1<-data.frame(xx_reorder[,1:(j-1)])
lmf = lm(xx_reorder[,j]~.,na.action=na.omit,data=data1)
sighat[pp+1-j] = summary(lmf)$sigma
}
xx_reorder1<-xx_reorder
binum<-length(summis[summis>0&datatype==1])
bistart<-0
z<-c(0,0)
if (binum>0) {
bistart<-length(summis[summis==0])
z<-matrix(NA,nrow=n,ncol=binum)
for(i in 1:binum){
bip<-mean(xx_reorder1[,(bistart+i)],na.rm=TRUE)
xx_reorder1[is.na(xx_reorder1[,(bistart+i)]),(bistart+i)]<-rbern(sum(is.na(xx_reorder1[,(bistart+i)])),bip)
z[xx_reorder1[,bistart+i]==0,i]<-rtnorm(sum(xx_reorder1[,bistart+i]==0),mean=qnorm(bip),1,lower=-Inf,upper=0)
z[xx_reorder1[,bistart+i]==1,i]<-rtnorm(sum(xx_reorder1[,bistart+i]==1),mean=qnorm(bip),1,lower=0,upper=Inf)
}
}
X<-matrix(NA,n,pp-1)
x0=xx_reorder1[,1:pp-1]#in-sample x
y0=xx_reorder1[,pp]
m<-apply(xx_reorder1,2,mean,na.rm=TRUE)
m[1:(pp-nvar)]<-0
m[vartype==1]<-0
for (j in 1:(pp-1)){
X[,j]<-x0[,j]-m[j]
}
for (j in 1:(pp-1)) {
X[is.na(X[,j]),j]=0
}
if (type==0){
y<-y0-m[pp]
y[is.na(y)]=0
} else {
y<-y0
}
beta<-NULL
V<-NULL
if (type==2) {
data1<-data.frame(y,X)
beta<-glm(y~.,data=data1, family=binomial)$coefficients
V <- vcov(glm(y~.,data=data1, family=binomial))
}
numimpute<-5
numskip<-numskip+1
nd<-numimpute*numskip
##### run BART
parfit=serBart(cstem,X,y,burn=burn,nd=nd,nmissing=nvar-1,xmiss=xmiss,sigest=sighat,vartype=vartype,z=z,bistart=bistart,binum=binum,type=type,beta=beta,V=V)
mif<-parfit$mif
mif_matrix<-t(matrix(mif,ncol=(burn+nd)))
mif_m1<-mif_matrix[(burn+1):(burn+nd),]
xtrans<-y
for(j in 1:(nvar-1)){
xtrans<-cbind(xtrans,X[,pp-j])
}
xtrans<-c(t(xtrans))
miss_ind<-c(t(xmiss))
#####imputed dataset
impu<-function(j){
xtrans[miss_ind==1]<-mif_m1[j,]
xtrans1<-t(matrix(xtrans,ncol=n))
xtrans2<-xtrans1[,(nvar):1]
ximpute<-xx_reorder[,1:(pp-nvar)]
for(j in 2:(nvar+1)){
ximpute<-cbind(ximpute,xtrans2[,j-1]+m[pp-nvar-1+j])}
if (type==1|type==2) {
ximpute<-ximpute[,-(pp)]}
ximpute<-ximpute[,order(order(summis1))]
return(ximpute)
}
for (i in 1:numimpute) {
assign(paste("imputed",i,sep=""),impu(i*numskip))
}
retlist<-list(imputed1=imputed1,imputed2=imputed2,imputed3=imputed3,
imputed4=imputed4,imputed5=imputed5)
print("You have reached the end of the function BART")
return(retlist)
}
wed_impute<-BartMI("/Users/as82986/BART/sequential_bart/",  wed_xx, wed_yy, wed_datatype, wed_type, 199,1000)
#--------------------------------------------------
serBart=function(cstem,
x,y,
nd=1000,burn=500,
m=200,
sigest=NA, sigdf=3, sigquant=.90,
kfac=2.0,
fname="",nmissing=0,xmiss=NULL,vartype,z,bistart,binum,type=0,beta=NULL,V=NULL)
{
cat("***** iiiRunning serBart\n\n")
#   my=mean(y)
#   y=y-my
#--------------------------------------------------
#write files
xroot=paste(cstem,fname,"x.txt",sep="")
yroot=paste(cstem,fname,"y.txt",sep="")
xmissroot=paste(cstem,fname,"xmiss.txt",sep="")
vartyperoot=paste(cstem,fname,"vartype.txt",sep="")
zroot=paste(cstem,fname,"z.txt",sep="")
ffname=paste(cstem,fname,"mif.txt",sep="")
p=ncol(x)
write(t(x),file=xroot,ncol=p)
write(y,file=yroot,ncol=1)
write(t(xmiss),file=xmissroot,ncol=nmissing+1)
write(t(vartype),file=vartyperoot,ncol=p+1)
if(binum==0){write(t(z),file=zroot,ncol=1)
}else{ write(t(z),file=zroot,ncol=binum)}
#--------------------------------------------------
nu=sigdf
sigq=qchisq(1.0-sigquant,nu)
lambda = (sigest*sigest*sigq)/nu #lambda parameter for sigma prior
#--------------------------------------------------
#run bart
if (type==0) {
cmd = paste(cstem,'mi_bart',sep='')
cmd = paste(cmd,xroot,yroot,"0",nd,"0.0",burn,m,nu,kfac,nmissing,xmissroot,bistart,vartyperoot,zroot,ffname)
} else if (type==1) {
cmd = paste(cstem,'mi_bart_y',sep='')
cmd = paste(cmd, xroot,yroot,"0",nd,"0.0",burn,m,nu,kfac,nmissing,xmissroot,bistart,vartyperoot,zroot,ffname)
} else if (type==2) {
betaroot=paste(cstem,fname,"beta.txt",sep="")
vroot=paste(cstem,fname,"z.txt",sep="")
write(t(V),file=vroot,ncol=p+1)
write(beta,file=betaroot,ncol=1)
cmd = paste(cstem,'mi_bart_y1',sep='')
cmd = paste(cmd,xroot,yroot,"0",nd,"0.0",burn,m,nu,kfac,nmissing,xmissroot,bistart,vartyperoot,zroot,betaroot,vroot,ffname)
}
for (i in 1:(nmissing+1)){
cmd<-paste(cmd,lambda[i])
}
cat(cmd,'\n')
print("here")
### THE most important command...
system(cmd) ## gonna create the excutable files from cpp that will eventually create mif.txt
#--------------------------------------------------
#read in results
mif =scan(paste(cstem,fname,"mif.txt",sep=""))
retlist<-list(mif=mif)
return(retlist)
}
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
####################   RUN BARTMI HERE   ############################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
BartMI=function(cstem,xx,yy,datatype,type,
numskip=199,burn=1000,
m=200,sigdf=3, sigquant=.90,
kfac=2.0)
{
pp<-ncol(xx)
n<-nrow(xx)
summis<-rep(NA,pp)
for(i in 1:pp){summis[i]<-sum(is.na(xx[,i]))}
summis1<-summis
summis1[datatype==1]<-summis[datatype==1]+n
summis1[datatype==0]<-summis[datatype==0]+2*n
summis1[summis==0]<-0
nvar<-pp-length(summis[summis==0])
xx_reorder<-xx[,order(summis1)]
vartype<-datatype[order(summis1)]
if (type==1|type==2) {
xx_reorder<-cbind(xx_reorder,yy)
vartype<-c(vartype,0)
nvar<-nvar+1
pp<-pp+1}
## missing data indicator
xmiss=matrix(rep(0,(nvar)*n),ncol=(nvar))
for (j in 1:(nvar)){
xmiss[is.na(xx_reorder[,pp+1-j]),j]=1
}
sighat<-rep(NA,nvar)
for(j in (pp):(pp-nvar+1)){
data1<-data.frame(xx_reorder[,1:(j-1)])
lmf = lm(xx_reorder[,j]~.,na.action=na.omit,data=data1)
sighat[pp+1-j] = summary(lmf)$sigma
}
xx_reorder1<-xx_reorder
binum<-length(summis[summis>0&datatype==1])
bistart<-0
z<-c(0,0)
if (binum>0) {
bistart<-length(summis[summis==0])
z<-matrix(NA,nrow=n,ncol=binum)
for(i in 1:binum){
bip<-mean(xx_reorder1[,(bistart+i)],na.rm=TRUE)
xx_reorder1[is.na(xx_reorder1[,(bistart+i)]),(bistart+i)]<-rbern(sum(is.na(xx_reorder1[,(bistart+i)])),bip)
z[xx_reorder1[,bistart+i]==0,i]<-rtnorm(sum(xx_reorder1[,bistart+i]==0),mean=qnorm(bip),1,lower=-Inf,upper=0)
z[xx_reorder1[,bistart+i]==1,i]<-rtnorm(sum(xx_reorder1[,bistart+i]==1),mean=qnorm(bip),1,lower=0,upper=Inf)
}
}
X<-matrix(NA,n,pp-1)
x0=xx_reorder1[,1:pp-1]#in-sample x
y0=xx_reorder1[,pp]
m<-apply(xx_reorder1,2,mean,na.rm=TRUE)
m[1:(pp-nvar)]<-0
m[vartype==1]<-0
for (j in 1:(pp-1)){
X[,j]<-x0[,j]-m[j]
}
for (j in 1:(pp-1)) {
X[is.na(X[,j]),j]=0
}
if (type==0){
y<-y0-m[pp]
y[is.na(y)]=0
} else {
y<-y0
}
beta<-NULL
V<-NULL
if (type==2) {
data1<-data.frame(y,X)
beta<-glm(y~.,data=data1, family=binomial)$coefficients
V <- vcov(glm(y~.,data=data1, family=binomial))
}
numimpute<-5
numskip<-numskip+1
nd<-numimpute*numskip
##### run BART
parfit=serBart(cstem,X,y,burn=burn,nd=nd,nmissing=nvar-1,xmiss=xmiss,sigest=sighat,vartype=vartype,z=z,bistart=bistart,binum=binum,type=type,beta=beta,V=V)
mif<-parfit$mif
mif_matrix<-t(matrix(mif,ncol=(burn+nd)))
mif_m1<-mif_matrix[(burn+1):(burn+nd),]
xtrans<-y
for(j in 1:(nvar-1)){
xtrans<-cbind(xtrans,X[,pp-j])
}
xtrans<-c(t(xtrans))
miss_ind<-c(t(xmiss))
#####imputed dataset
impu<-function(j){
xtrans[miss_ind==1]<-mif_m1[j,]
xtrans1<-t(matrix(xtrans,ncol=n))
xtrans2<-xtrans1[,(nvar):1]
ximpute<-xx_reorder[,1:(pp-nvar)]
for(j in 2:(nvar+1)){
ximpute<-cbind(ximpute,xtrans2[,j-1]+m[pp-nvar-1+j])}
if (type==1|type==2) {
ximpute<-ximpute[,-(pp)]}
ximpute<-ximpute[,order(order(summis1))]
return(ximpute)
}
for (i in 1:numimpute) {
assign(paste("imputed",i,sep=""),impu(i*numskip))
}
retlist<-list(imputed1=imputed1,imputed2=imputed2,imputed3=imputed3,
imputed4=imputed4,imputed5=imputed5)
print("You have reached the end of the function BART")
return(retlist)
}
wed_impute<-BartMI("/Users/as82986/BART/sequential_bart/",  wed_xx, wed_yy, wed_datatype, wed_type, 199,1000)
wed_impute<-BartMI("/Users/as82986/BART/sequential_bart/",  wed_xx, wed_yy, wed_datatype, wed_type, 199,1000)
mm<- load("/Users/as82986/Downloads/example.Rdata")
mm
load("/Users/as82986/Downloads/example.Rdata")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , 'return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;' )
fx(10,5)
fx(2L,5)
library("packrat", lib.loc="~/Library/R/3.3/library")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
+     return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
+ ' )
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx(2L,5)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , 'return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;' )
fx(2L,5)
file.path(R.home("etc"), "Makeconf"))
file.path(R.home("etc"), "Makeconf")
makefilecontent <- read
file.show(file.path(R.home("etc"), "Makeconf"))
normalizePath("~/.R/Makevars")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , 'return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;' )
fx(2L,5)
normalizePath("~/.R")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , 'return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;' )
fx(2L,5)
file.show(file.path(R.home("etc"), "Makeconf"))
normalizePath("~/.R")
file.show(  "/Users/as82986/BART/serbart1.Rcheck/00install.out"  )
file.show("/Users/as82986/BART/serbart1.Rcheck/00install.out")
file.show("/Users/as82986/BART/serbart1.Rcheck/00check.log")
R_HOME/etcR_ARCH/Makeconf
"R_HOME/etcR_ARCH/Makeconf"
file.show(file.path(R_HOME/etcR_ARCH/, "Makeconf"))
file.show(file.path(R.home("etc"), "Makeconf"))
file.show(file.path(R.home("etcR_ARCH"), "Makeconf"))
normalizePath("~/.R")
normalizePath("~/R.home")
pathh = file.path(R.home("etcR_ARCH"), "Makeconf")
setwd(pathh)
path2 = normalizePath("~/.R")
setwd(path2)
file.show(file.path(R.home("etc"), "Makeconf"))
path3 = file.path(R.home("etc"), "Makeconf")
path3
path3 = file.path(R.home)
path3 = R.home
path3
file.open(path3)
file.show(path3)
View(path3)
file.show(file.path(~(".R"), "Makevars"))
file.show(file.path(~/.R, "Makevars"))
file.show(file.path(R.home("etc"), "Makeconf"))
file.show(file.path(~("/.R"), "Makevars"))
file.show(path2)
file.show("~/.R/Makevars")
path2 = normalizePath("~/.R")
setwd(path2)
one = file.path(R.home)
one = file.path("R.home")
one
one = file.path(R.home, "etc")
R.home
R.home("home")
R.home("etc")
one = file.path(R.home("home"))
one
file.show(file.path(R.home("etc"), "Makeconf"))
R_HOME
RHOME
R.home()
View(path3)
file.show(file.path(R.home("etc"), "Makeconf"))
echo 'Rcpp:::CxxFlags()' | $(R RHOME)/bin/R --vanilla --slave
Rcpp:::CxxFlags()
q()
package_version(Rcpp)
package_version("Rcpp")
library("Rcpp", lib.loc="~/Library/R/3.3/library")
detach("package:Rcpp", unload=TRUE)
package_version()
getRversion()
packageStatus()
package_version("Rcpp")
packageVersion("Rcpp")
packageDescrition("Rcpp")
packageDescription("Rcpp")
install.packages(c("BH", "colorspace", "colourpicker", "dygraphs", "evaluate", "ggplot2", "htmlwidgets", "knitr", "MCMCpack", "miscTools", "rmarkdown", "rsconnect", "scales", "shiny", "SparseM", "StanHeaders", "yaml"))
install.packages(c("cluster", "codetools", "curl", "git2r", "mgcv", "openssl", "R6", "Rcpp", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("cluster", "codetools", "curl", "git2r", "mgcv",
install.packages(c("cluster", "codetools", "curl", "git2r", "mgcv", "openssl", "R6", "Rcpp", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ip <- installed.packages()
View(ip)
pkgs.to.remove <- ip[!(ip[,"Priority"] %in% c("base", "recommended")), 1]
pkgs.to.remove
save(ip, file= "/Users/as82986/Desktop/allpreviouspackages.RData")
data()
data("AirPassengers")
data("AirPassengers")
AirPassengers
library(help = "datasets")
